
use darkelf::draw::DrawUtils;
use darkelf::command::CommandGenerator;
use ttf_parser::Face;

struct PathPrinter;


#[test]
fn test_glyphs() {
    


    let fontName = "Roboto-Bold.ttf";
    //let fontName = "laser.regular.ttf";
    let ttf_bytes = std::fs::read(format!("assets/fonts/{}", fontName)).unwrap();
    let face = Face::from_slice(&ttf_bytes, 0).unwrap();


    let text_data = DrawUtils::get_text_lines(&face, "ABC123", None, None);

    let simplified_shapes = DrawUtils::layout_and_simplify_shapes(&text_data, false, true, true);


    // Serialize text_data to JSON and write to file
    let json = serde_json::to_string_pretty(&simplified_shapes).unwrap();
    std::fs::write("darkelf_coordinates.json", json).unwrap();
    println!("Wrote text_data to darkelf_coordinates.json");


    let cmd_text = CommandGenerator::get_xys_cmd(&simplified_shapes);


    let verify_text = "A0A1A2A300F00F8324804F018347804F11830C004F1182F6004F1182F90034108324804F1182D5804F0183010034108304004F1182EE004F1182B3804F1182D5804F1182D780140182D7802E11832B802E11832B80141182D78014118261800A018289800A21828A000D218261000D208256001020824F001820824D0024208251002F20825B0034208267003620827E003621827E804F21829F804F21829F004F218258004E20824A004B20823F00472082370040208230003720822D002C20822D002020822F0015208235000C20823F000420824C00002082578001218261800A218292804F018285803621825F8036208254803320824C802B208249802020824B8016208251800E20825D800A208280800A218280000D218259000D2182510004218247000320823A8001208231800920822B8012208229801D20822A802C20822D8036208236804220823E8048208248804C208254804E208262804F208292804F2181B7801A018197801A318199802630819D80313081A3803A3081AB80423081B580483081C1804D3081CE804F3081DB804F3081E6804D3081F0804A3081F98045308204803B30820A803330820F80293082138019308215000C308212001E30820E002930820A0033308203003B3081FC00423081F400483081EA004C3081E0004E3081D5004F3081C7004E3081BA004B3081AF00453081A7003E3081A0003530819B002B308198001F30819700193181B700193181B800233081BE002E3081C700343081D100363081DB00363081E500323081ED002A3081F2001E3081F4000F3081F480133081F2801E3081ED802A3081E680323081DC80363081D180363081C880343081BE802E3081B980243081B7801A31813E004F01813E804F41815E804F41815E002B418183001F4181830038418142004F40813E004F4180BC80370180BC804F518127804F518127803B5180EB00085080E400125080E1001C5080E100285080E600325080F000365080FA0036508105003050810A002750810B001C51812A001C51812900275081260031508121003A50811A00425081110048508106004D5080FB004F5080EE004F5080E2004D5080D8004A5080CD00425080C500375080C200285080C2001D5080C500115080CB00055080FF80375180BC8037518085000D018072000D6080680010608061001760805E0023608060002D6080690036608075003760807F0034608087002B60808800256180A600256180A4003360809D003F6080920048608089004C60807F004E608074004F608068004E60805D004C6080540048608049003F60804200336080400029608040001E608044001260804D00096080550003608060800160806C80036080858003618085000D618085800A0180850006618067000560805A000360805080016080488008608040801260803D801E60803E802A6080418035608047803E608050804660805A804B608066804E608074804F60807F804E60808B804B608095804660809D80406080A480376080A8802B6080A8802361808A8023618087802D60807F803560807380376080698036608060802F60805C802460805D8019608063800F60806F800A608085800A618001000000006300000000C7000000012B000000018F00000001F3000000025700000002BB000000031F000000010FA88A9259827F6464646464646464641135370821410101010101010101010000000000000000010102030405060102030405060708080909090909090005A4A5A6A7";

    std::fs::write("rust_output.txt", &cmd_text).unwrap();
    std::fs::write("js_output.txt", &verify_text).unwrap();

    assert_eq!(cmd_text, verify_text, "cmd_text does not match verify_text");
    println!("Wrote text_data to darkelf_coordinates.json");
}